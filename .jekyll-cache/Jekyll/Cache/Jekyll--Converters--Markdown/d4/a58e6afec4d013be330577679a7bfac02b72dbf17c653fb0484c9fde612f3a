I"†€<p>Hello, welcome to my blog! This post will share the data normalization of <strong><a href="https://github.com/rfordatascience/tidytuesday/tree/master/data/2020/2020-01-21">Spotify Dataset</a></strong>.</p>

<p>Please visit my <strong><a href="https://github.com/eveyimi/eveyimi.github.io">GitHub</a></strong> for more information.</p>

<h1 id="normal-forms">Normal Forms</h1>

<blockquote>
  <p>Every table should not have any duplication or dependencies that are not key or domain constraints</p>

  <p><strong>First Normal Form (1NF):</strong> If a relation contain composite or multi-valued attribute, it violates first normal form or a relation is in first normal form if it does not contain any composite or multi-valued attribute. A relation is in first normal form if every attribute in that relation is singled valued attribute.</p>

  <p><strong>Second Normal Form (2NF):</strong> To be in second normal form, a relation must be in first normal form and relation must not contain any partial dependency. A relation is in 2NF if it has No Partial Dependency, i.e., no non-prime attribute (attributes which are not part of any candidate key) is dependent on any proper subset of any candidate key of the table. Partial Dependency â€“ If the proper subset of candidate key determines non-prime attribute, it is called partial dependency.</p>

  <p><strong>Third Normal Form (3NF):</strong> A relation is in third normal form, if there is no transitive dependency for non-prime attributes as well as it is in second normal form. A relation is in 3NF if at least one of the following condition holds in every non-trivial function dependency X â€“&gt; Y:</p>
  <ol>
    <li>X is a super key.</li>
    <li>Y is a prime attribute (each element of Y is part of some candidate key).</li>
  </ol>

  <p><cite>GeeksforGeeks</cite></p>
</blockquote>

<p><br /></p>

<h1 id="dataset-overview">Dataset Overview</h1>
<p>I use the Spotify dataset from the source above. The data comes from Spotify via the spotifyr package. Charlie Thompson, Josiah Parry, Donal Phipps, and Tom Wolff authored this package to make it easier to get either your own data or general metadata arounds songs from Spotifyâ€™s API. We can use the code below to get the data and look into the info. We can see that there are 23 columns and 32833 entries.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="n">pd</span><span class="p">.</span><span class="n">set_option</span><span class="p">(</span><span class="s">'display.max_columns'</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
<span class="n">pd</span><span class="p">.</span><span class="n">set_option</span><span class="p">(</span><span class="s">'display.max_rows'</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
<span class="n">all_data</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s">"https://raw.githubusercontent.com/rfordatascience
                        /tidytuesday/master/data/2020/2020-01-21/spotify_songs.csv"</span><span class="p">)</span>
<span class="n">all_data</span><span class="p">.</span><span class="n">info</span><span class="p">()</span></code></pre></figure>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    RangeIndex: 32833 entries, 0 to 32832
    Data columns (total 23 columns):
    #   Column                    Non-Null Count  Dtype  
    ---  ------                    --------------  -----  
    0   track_id                  32833 non-null  object 
    1   track_name                32828 non-null  object 
    2   track_artist              32828 non-null  object 
    3   track_popularity          32833 non-null  int64  
    4   track_album_id            32833 non-null  object 
    5   track_album_name          32828 non-null  object 
    6   track_album_release_date  32833 non-null  object 
    7   playlist_name             32833 non-null  object 
    8   playlist_id               32833 non-null  object 
    9   playlist_genre            32833 non-null  object 
    10  playlist_subgenre         32833 non-null  object 
    11  danceability              32833 non-null  float64
    12  energy                    32833 non-null  float64
    13  key                       32833 non-null  int64  
    14  loudness                  32833 non-null  float64
    15  mode                      32833 non-null  int64  
    16  speechiness               32833 non-null  float64
    17  acousticness              32833 non-null  float64
    18  instrumentalness          32833 non-null  float64
    19  liveness                  32833 non-null  float64
    20  valence                   32833 non-null  float64
    21  tempo                     32833 non-null  float64
    22  duration_ms               32833 non-null  int64  
    dtypes: float64(9), int64(4), object(10)
</code></pre></div></div>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>track_id</th>
      <th>track_name</th>
      <th>track_artist</th>
      <th>track_popularity</th>
      <th>track_album_id</th>
      <th>track_album_name</th>
      <th>track_album_release_date</th>
      <th>playlist_name</th>
      <th>playlist_id</th>
      <th>playlist_genre</th>
      <th>playlist_subgenre</th>
      <th>danceability</th>
      <th>energy</th>
      <th>key</th>
      <th>loudness</th>
      <th>mode</th>
      <th>speechiness</th>
      <th>acousticness</th>
      <th>instrumentalness</th>
      <th>liveness</th>
      <th>valence</th>
      <th>tempo</th>
      <th>duration_ms</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>6f807x0ima9a1j3VPbc7VN</td>
      <td>I Don't Care (with Justin Bieber) - Loud Luxur...</td>
      <td>Ed Sheeran</td>
      <td>66</td>
      <td>2oCs0DGTsRO98Gh5ZSl2Cx</td>
      <td>I Don't Care (with Justin Bieber) [Loud Luxury...</td>
      <td>2019-06-14</td>
      <td>Pop Remix</td>
      <td>37i9dQZF1DXcZDD7cfEKhW</td>
      <td>pop</td>
      <td>dance pop</td>
      <td>0.748</td>
      <td>0.916</td>
      <td>6</td>
      <td>-2.634</td>
      <td>1</td>
      <td>0.0583</td>
      <td>0.1020</td>
      <td>0.000000</td>
      <td>0.0653</td>
      <td>0.518</td>
      <td>122.036</td>
      <td>194754</td>
    </tr>
    <tr>
      <th>1</th>
      <td>0r7CVbZTWZgbTCYdfa2P31</td>
      <td>Memories - Dillon Francis Remix</td>
      <td>Maroon 5</td>
      <td>67</td>
      <td>63rPSO264uRjW1X5E6cWv6</td>
      <td>Memories (Dillon Francis Remix)</td>
      <td>2019-12-13</td>
      <td>Pop Remix</td>
      <td>37i9dQZF1DXcZDD7cfEKhW</td>
      <td>pop</td>
      <td>dance pop</td>
      <td>0.726</td>
      <td>0.815</td>
      <td>11</td>
      <td>-4.969</td>
      <td>1</td>
      <td>0.0373</td>
      <td>0.0724</td>
      <td>0.004210</td>
      <td>0.3570</td>
      <td>0.693</td>
      <td>99.972</td>
      <td>162600</td>
    </tr>
    <tr>
      <th>2</th>
      <td>1z1Hg7Vb0AhHDiEmnDE79l</td>
      <td>All the Time - Don Diablo Remix</td>
      <td>Zara Larsson</td>
      <td>70</td>
      <td>1HoSmj2eLcsrR0vE9gThr4</td>
      <td>All the Time (Don Diablo Remix)</td>
      <td>2019-07-05</td>
      <td>Pop Remix</td>
      <td>37i9dQZF1DXcZDD7cfEKhW</td>
      <td>pop</td>
      <td>dance pop</td>
      <td>0.675</td>
      <td>0.931</td>
      <td>1</td>
      <td>-3.432</td>
      <td>0</td>
      <td>0.0742</td>
      <td>0.0794</td>
      <td>0.000023</td>
      <td>0.1100</td>
      <td>0.613</td>
      <td>124.008</td>
      <td>176616</td>
    </tr>
    <tr>
      <th>3</th>
      <td>75FpbthrwQmzHlBJLuGdC7</td>
      <td>Call You Mine - Keanu Silva Remix</td>
      <td>The Chainsmokers</td>
      <td>60</td>
      <td>1nqYsOef1yKKuGOVchbsk6</td>
      <td>Call You Mine - The Remixes</td>
      <td>2019-07-19</td>
      <td>Pop Remix</td>
      <td>37i9dQZF1DXcZDD7cfEKhW</td>
      <td>pop</td>
      <td>dance pop</td>
      <td>0.718</td>
      <td>0.930</td>
      <td>7</td>
      <td>-3.778</td>
      <td>1</td>
      <td>0.1020</td>
      <td>0.0287</td>
      <td>0.000009</td>
      <td>0.2040</td>
      <td>0.277</td>
      <td>121.956</td>
      <td>169093</td>
    </tr>
    <tr>
      <th>4</th>
      <td>1e8PAfcKUYoKkxPhrHqw4x</td>
      <td>Someone You Loved - Future Humans Remix</td>
      <td>Lewis Capaldi</td>
      <td>69</td>
      <td>7m7vv9wlQ4i0LFuJiE2zsQ</td>
      <td>Someone You Loved (Future Humans Remix)</td>
      <td>2019-03-05</td>
      <td>Pop Remix</td>
      <td>37i9dQZF1DXcZDD7cfEKhW</td>
      <td>pop</td>
      <td>dance pop</td>
      <td>0.650</td>
      <td>0.833</td>
      <td>1</td>
      <td>-4.672</td>
      <td>1</td>
      <td>0.0359</td>
      <td>0.0803</td>
      <td>0.000000</td>
      <td>0.0833</td>
      <td>0.725</td>
      <td>123.976</td>
      <td>189052</td>
    </tr>
    <tr>
      <th>5</th>
      <td>7fvUMiyapMsRRxr07cU8Ef</td>
      <td>Beautiful People (feat. Khalid) - Jack Wins Remix</td>
      <td>Ed Sheeran</td>
      <td>67</td>
      <td>2yiy9cd2QktrNvWC2EUi0k</td>
      <td>Beautiful People (feat. Khalid) [Jack Wins Remix]</td>
      <td>2019-07-11</td>
      <td>Pop Remix</td>
      <td>37i9dQZF1DXcZDD7cfEKhW</td>
      <td>pop</td>
      <td>dance pop</td>
      <td>0.675</td>
      <td>0.919</td>
      <td>8</td>
      <td>-5.385</td>
      <td>1</td>
      <td>0.1270</td>
      <td>0.0799</td>
      <td>0.000000</td>
      <td>0.1430</td>
      <td>0.585</td>
      <td>124.982</td>
      <td>163049</td>
    </tr>
    <tr>
      <th>6</th>
      <td>2OAylPUDDfwRGfe0lYqlCQ</td>
      <td>Never Really Over - R3HAB Remix</td>
      <td>Katy Perry</td>
      <td>62</td>
      <td>7INHYSeusaFlyrHSNxm8qH</td>
      <td>Never Really Over (R3HAB Remix)</td>
      <td>2019-07-26</td>
      <td>Pop Remix</td>
      <td>37i9dQZF1DXcZDD7cfEKhW</td>
      <td>pop</td>
      <td>dance pop</td>
      <td>0.449</td>
      <td>0.856</td>
      <td>5</td>
      <td>-4.788</td>
      <td>0</td>
      <td>0.0623</td>
      <td>0.1870</td>
      <td>0.000000</td>
      <td>0.1760</td>
      <td>0.152</td>
      <td>112.648</td>
      <td>187675</td>
    </tr>
    <tr>
      <th>7</th>
      <td>6b1RNvAcJjQH73eZO4BLAB</td>
      <td>Post Malone (feat. RANI) - GATTÃœSO Remix</td>
      <td>Sam Feldt</td>
      <td>69</td>
      <td>6703SRPsLkS4bPtMFFJes1</td>
      <td>Post Malone (feat. RANI) [GATTÃœSO Remix]</td>
      <td>2019-08-29</td>
      <td>Pop Remix</td>
      <td>37i9dQZF1DXcZDD7cfEKhW</td>
      <td>pop</td>
      <td>dance pop</td>
      <td>0.542</td>
      <td>0.903</td>
      <td>4</td>
      <td>-2.419</td>
      <td>0</td>
      <td>0.0434</td>
      <td>0.0335</td>
      <td>0.000005</td>
      <td>0.1110</td>
      <td>0.367</td>
      <td>127.936</td>
      <td>207619</td>
    </tr>
    <tr>
      <th>8</th>
      <td>7bF6tCO3gFb8INrEDcjNT5</td>
      <td>Tough Love - TiÃ«sto Remix / Radio Edit</td>
      <td>Avicii</td>
      <td>68</td>
      <td>7CvAfGvq4RlIwEbT9o8Iav</td>
      <td>Tough Love (TiÃ«sto Remix)</td>
      <td>2019-06-14</td>
      <td>Pop Remix</td>
      <td>37i9dQZF1DXcZDD7cfEKhW</td>
      <td>pop</td>
      <td>dance pop</td>
      <td>0.594</td>
      <td>0.935</td>
      <td>8</td>
      <td>-3.562</td>
      <td>1</td>
      <td>0.0565</td>
      <td>0.0249</td>
      <td>0.000004</td>
      <td>0.6370</td>
      <td>0.366</td>
      <td>127.015</td>
      <td>193187</td>
    </tr>
    <tr>
      <th>9</th>
      <td>1IXGILkPm0tOCNeq00kCPa</td>
      <td>If I Can't Have You - Gryffin Remix</td>
      <td>Shawn Mendes</td>
      <td>67</td>
      <td>4QxzbfSsVryEQwvPFEV5Iu</td>
      <td>If I Can't Have You (Gryffin Remix)</td>
      <td>2019-06-20</td>
      <td>Pop Remix</td>
      <td>37i9dQZF1DXcZDD7cfEKhW</td>
      <td>pop</td>
      <td>dance pop</td>
      <td>0.642</td>
      <td>0.818</td>
      <td>2</td>
      <td>-4.552</td>
      <td>1</td>
      <td>0.0320</td>
      <td>0.0567</td>
      <td>0.000000</td>
      <td>0.0919</td>
      <td>0.590</td>
      <td>124.957</td>
      <td>253040</td>
    </tr>
  </tbody>
</table>
</div>

<p><br /></p>

<h1 id="normalization">Normalization</h1>

<h2 id="1-first-normal-form-1nf">1. First Normal Form (1NF)</h2>

<h2 id="2-second-normal-form-2nf">2. Second Normal Form (2NF)</h2>

<h3 id="overview">overview</h3>
<p>Extracted the data from the <code class="language-plaintext highlighter-rouge">malaria_deaths.csv</code> file as a dataframe, we can see that there are four columns, including <code class="language-plaintext highlighter-rouge">Entity</code>, <code class="language-plaintext highlighter-rouge">Code</code>, <code class="language-plaintext highlighter-rouge">Year</code>, <code class="language-plaintext highlighter-rouge">Deaths</code>. <code class="language-plaintext highlighter-rouge">Deaths</code> indicates deaths per 100,000 people for the corresponding country. <code class="language-plaintext highlighter-rouge">malaria_inc.info()</code> tells us there are 6156 rows and 4 columns. I then took a look at the situation of deaths in different countries to by comparing the avearge the deaths from 1990 to 2016.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    RangeIndex: 6156 entries, 0 to 6155
    Data columns (total 4 columns):
     #   Column  Non-Null Count  Dtype  
    ---  ------  --------------  -----  
     0   Entity  6156 non-null   object 
     1   Code    5292 non-null   object 
     2   Year    6156 non-null   int64  
     3   Deaths  6156 non-null   float64
    dtypes: float64(1), int64(1), object(2)
</code></pre></div></div>

<p><br /></p>
<h3 id="code">code</h3>
<p>Data Manipulation</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">malaria_deaths</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s">"~/work/ym/hw3_malaria/malaria_deaths.csv"</span><span class="p">)</span>
<span class="n">malaria_deaths</span><span class="p">.</span><span class="n">columns</span> <span class="o">=</span> <span class="p">[</span><span class="s">"Entity"</span><span class="p">,</span> <span class="s">"Code"</span><span class="p">,</span> <span class="s">"Year"</span><span class="p">,</span> <span class="s">"Deaths"</span><span class="p">]</span>
<span class="n">average_deaths</span> <span class="o">=</span> <span class="n">malaria_deaths</span><span class="p">.</span><span class="n">groupby</span><span class="p">(</span><span class="s">"Entity"</span><span class="p">)[</span><span class="s">"Deaths"</span><span class="p">].</span><span class="n">mean</span><span class="p">()</span>
<span class="n">world_deaths</span> <span class="o">=</span> <span class="n">world</span><span class="p">.</span><span class="n">merge</span><span class="p">(</span><span class="n">average_deaths</span><span class="p">,</span> <span class="n">left_on</span> <span class="o">=</span> <span class="s">'name'</span><span class="p">,</span> <span class="n">right_on</span> <span class="o">=</span> <span class="s">'Entity'</span><span class="p">)</span></code></pre></figure>

<p>Data Visualization</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">ax</span> <span class="o">=</span> <span class="n">world_inc</span><span class="p">.</span><span class="n">dropna</span><span class="p">().</span><span class="n">plot</span><span class="p">(</span><span class="n">column</span> <span class="o">=</span> <span class="s">'Deaths'</span><span class="p">,</span> <span class="n">cmap</span> <span class="o">=</span> <span class="s">'Reds'</span><span class="p">,</span> 
                             <span class="n">figsize</span> <span class="o">=</span> <span class="p">(</span><span class="mi">25</span><span class="p">,</span><span class="mi">15</span><span class="p">),</span> <span class="n">scheme</span> <span class="o">=</span> <span class="s">'quantiles'</span><span class="p">,</span> 
                             <span class="n">k</span> <span class="o">=</span> <span class="mi">3</span><span class="p">,</span> <span class="n">legend</span> <span class="o">=</span> <span class="bp">True</span><span class="p">);</span>
<span class="n">ax</span><span class="p">.</span><span class="n">set_title</span><span class="p">(</span><span class="s">'Average deaths of Malaria among contries from 1990 to 2016'</span><span class="p">,</span> 
              <span class="n">fontdict</span> <span class="o">=</span> <span class="p">{</span><span class="s">'fontsize'</span><span class="p">:</span><span class="mi">25</span><span class="p">})</span>
<span class="n">ax</span><span class="p">.</span><span class="n">set_axis_off</span><span class="p">()</span>
<span class="n">ax</span><span class="p">.</span><span class="n">get_legend</span><span class="p">().</span><span class="n">set_bbox_to_anchor</span><span class="p">((.</span><span class="mi">12</span><span class="p">,.</span><span class="mi">12</span><span class="p">))</span></code></pre></figure>

<h3 id="visualizations">visualizations</h3>
<p><img src="/images/HW3/death_country.png" alt="Deaths of countries" />
<em>Average deaths of Malaria among contries from 1990 to 2016</em></p>

<p><br />
For the reason that the max value of deaths data is below 200, I thus splited the data into 3 ranks. The deeper the color, the more serious the Malaria in this country. Just as the previous figure, the Malaria is most serious in Africa area. However, the difference between those two figures is that some rigions like China and Europe seems located inside the medium ranking. I guess it might because the death data is from 1990 rather than from 2000, when the medical level is rather low compare to 21th century. It is possible that almost all countries ware suffring from the Malaria to some extent. However, with the development of technology and medical level, some countries cna better control the Malaria and therefore has fewer cases. It is also the reason that other countries should offer help to those countries who are still suffering from the Malaria.</p>

<h2 id="3-third-normal-form-3nf">3. Third Normal Form (3NF)</h2>

<h3 id="overview-1">overview</h3>
<p>Based on the <code class="language-plaintext highlighter-rouge">malaria_deaths</code> dataset and <code class="language-plaintext highlighter-rouge">world</code> dataset, we can see how the Malaria distributes among different continents, using the <code class="language-plaintext highlighter-rouge">continent</code> field in <code class="language-plaintext highlighter-rouge">world</code> dataset. I first merge those two datasets, and then group by <code class="language-plaintext highlighter-rouge">continent</code> and <code class="language-plaintext highlighter-rouge">Year</code> since I am also curious how the deaths data change over years.
Next, I unstack the dataframe and save the death data into a dictionary with the <code class="language-plaintext highlighter-rouge">continent</code> as keys and <code class="language-plaintext highlighter-rouge">Deaths</code> as values. After doing that, I was able to draw a stackplot as followed.</p>

<h3 id="code-1">code</h3>
<p>Data Manipulation</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">continent_death</span> <span class="o">=</span> <span class="n">world</span><span class="p">.</span><span class="n">merge</span><span class="p">(</span><span class="n">malaria_deaths</span><span class="p">,</span> <span class="n">left_on</span> <span class="o">=</span> <span class="s">'name'</span><span class="p">,</span> <span class="n">right_on</span> <span class="o">=</span> <span class="s">'Entity'</span><span class="p">)</span>
<span class="n">x</span> <span class="o">=</span> <span class="n">continent_death</span><span class="p">.</span><span class="n">groupby</span><span class="p">([</span><span class="s">'continent'</span><span class="p">,</span> <span class="s">'Year'</span><span class="p">])[</span><span class="s">"Deaths"</span><span class="p">].</span><span class="n">mean</span><span class="p">()</span>
<span class="n">x</span> <span class="o">=</span> <span class="n">x</span><span class="p">.</span><span class="n">unstack</span><span class="p">(</span><span class="n">level</span><span class="o">=</span><span class="s">'continent'</span><span class="p">)</span>
<span class="n">Year</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">x</span><span class="p">.</span><span class="n">index</span><span class="p">)</span>
<span class="n">death_by_continent</span> <span class="o">=</span> <span class="p">{}</span>
<span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="nb">list</span><span class="p">(</span><span class="n">x</span><span class="p">.</span><span class="n">columns</span><span class="p">):</span>
    <span class="n">death_by_continent</span><span class="p">[</span><span class="n">c</span><span class="p">]</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">x</span><span class="p">[</span><span class="n">c</span><span class="p">])</span>  </code></pre></figure>

<p>Data Visualization</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">subplots</span><span class="p">(</span><span class="n">figsize</span> <span class="o">=</span> <span class="p">(</span><span class="mi">20</span><span class="p">,</span> <span class="mi">10</span><span class="p">))</span>
<span class="n">ax</span><span class="p">.</span><span class="n">stackplot</span><span class="p">(</span><span class="n">Year</span><span class="p">,</span> <span class="n">death_by_continent</span><span class="p">.</span><span class="n">values</span><span class="p">(),</span>
             <span class="n">labels</span><span class="o">=</span><span class="n">death_by_continent</span><span class="p">.</span><span class="n">keys</span><span class="p">())</span>
<span class="n">ax</span><span class="p">.</span><span class="n">legend</span><span class="p">(</span><span class="n">loc</span><span class="o">=</span><span class="s">'lower left'</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="n">set_title</span><span class="p">(</span><span class="s">'Deaths of Malaria among continents through 1990 to 2016'</span><span class="p">,</span> 
              <span class="n">fontdict</span> <span class="o">=</span> <span class="p">{</span><span class="s">'fontsize'</span><span class="p">:</span><span class="mi">25</span><span class="p">})</span>
<span class="n">ax</span><span class="p">.</span><span class="n">set_xlabel</span><span class="p">(</span><span class="s">'Year'</span><span class="p">,</span> <span class="n">fontdict</span> <span class="o">=</span> <span class="p">{</span><span class="s">'fontsize'</span><span class="p">:</span><span class="mi">13</span><span class="p">})</span>
<span class="n">ax</span><span class="p">.</span><span class="n">set_ylabel</span><span class="p">(</span><span class="s">'Number of people (millions)'</span><span class="p">,</span> <span class="n">fontdict</span> <span class="o">=</span> <span class="p">{</span><span class="s">'fontsize'</span><span class="p">:</span><span class="mi">13</span><span class="p">})</span>
<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span></code></pre></figure>

<h3 id="visualizations-1">visualizations</h3>
<p><img src="/images/HW3/death_continent.png" alt="Deaths of countries" />
<em>Deaths of Malaria among continents through 1990 to 2016</em></p>

<p><br />
As it is shown in the figure, there is a U-curve on deaths of Malaria from 1990 to 2016 and the peek showed in 2002~2003. After that, the deaths ratetall over the world decreased to almost half of before. We can also see that Africa takes the largest position of deaths among all continents and second largest continent is Oceania, and the third is Asia. The reason why Oceania has the second largest death rate is probabally because of the terrain.</p>

<h2 id="4-how-the-age-infects-deaths-of-malaria">4. How the age infects deaths of Malaria</h2>

<h3 id="overview-2">overview</h3>
<p>Extracted the data from the <code class="language-plaintext highlighter-rouge">malaria_deaths_age.csv</code> file as a dataframe, we can see that there are six columns, including <code class="language-plaintext highlighter-rouge">entity</code>, <code class="language-plaintext highlighter-rouge">code</code>, <code class="language-plaintext highlighter-rouge">year</code>, <code class="language-plaintext highlighter-rouge">age_group</code>, <code class="language-plaintext highlighter-rouge">deaths</code>, <code class="language-plaintext highlighter-rouge">Unnamed: 0	</code>. <code class="language-plaintext highlighter-rouge">age_group</code> has 5 levels, <code class="language-plaintext highlighter-rouge">15-49</code>, <code class="language-plaintext highlighter-rouge">5-14</code>, <code class="language-plaintext highlighter-rouge">50-69</code>, <code class="language-plaintext highlighter-rouge">70 or older</code>, <code class="language-plaintext highlighter-rouge">Under 5</code>. <code class="language-plaintext highlighter-rouge">malaria_deaths_age.info()</code> tells us there are 30780 rows and 6 columns. I then took a look at the deaths rate of different age groups from 1990 to 2016, by merging to <code class="language-plaintext highlighter-rouge">world</code>, then grouping by <code class="language-plaintext highlighter-rouge">age_group</code> and <code class="language-plaintext highlighter-rouge">year</code>, and finally unstacking and drawing plots.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    RangeIndex: 30780 entries, 0 to 30779
    Data columns (total 6 columns):
     #   Column      Non-Null Count  Dtype  
    ---  ------      --------------  -----  
     0   Unnamed: 0  30780 non-null  int64  
     1   entity      30780 non-null  object 
     2   code        26460 non-null  object 
     3   year        30780 non-null  int64  
     4   age_group   30780 non-null  object 
     5   deaths      30780 non-null  float64
    dtypes: float64(1), int64(2), object(3)
</code></pre></div></div>

<p><br /></p>
<h3 id="code-2">code</h3>
<p>Data Manipulation</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">malaria_deaths_age</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s">"~/work/ym/hw3_malaria/malaria_deaths_age.csv"</span><span class="p">)</span>
<span class="n">world_death_age</span> <span class="o">=</span> <span class="n">world</span><span class="p">.</span><span class="n">merge</span><span class="p">(</span><span class="n">malaria_deaths_age</span><span class="p">,</span> <span class="n">left_on</span> <span class="o">=</span> <span class="s">'name'</span><span class="p">,</span> <span class="n">right_on</span> <span class="o">=</span> <span class="s">'entity'</span><span class="p">)</span>
<span class="n">y</span> <span class="o">=</span> <span class="n">world_death_age</span><span class="p">.</span><span class="n">groupby</span><span class="p">([</span><span class="s">'age_group'</span><span class="p">,</span> <span class="s">'year'</span><span class="p">])[</span><span class="s">"deaths"</span><span class="p">].</span><span class="n">mean</span><span class="p">()</span>
<span class="n">y</span> <span class="o">=</span> <span class="n">y</span><span class="p">.</span><span class="n">unstack</span><span class="p">(</span><span class="n">level</span><span class="o">=</span><span class="s">'age_group'</span><span class="p">)</span>
<span class="n">Year_age</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">y</span><span class="p">.</span><span class="n">index</span><span class="p">)</span>
<span class="n">death_by_age</span> <span class="o">=</span> <span class="p">{}</span>
<span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="nb">list</span><span class="p">(</span><span class="n">y</span><span class="p">.</span><span class="n">columns</span><span class="p">):</span>
    <span class="n">death_by_age</span><span class="p">[</span><span class="n">c</span><span class="p">]</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">y</span><span class="p">[</span><span class="n">c</span><span class="p">])</span>  </code></pre></figure>

<p>Data Visualization</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">subplots</span><span class="p">(</span><span class="n">figsize</span> <span class="o">=</span> <span class="p">(</span><span class="mi">20</span><span class="p">,</span> <span class="mi">10</span><span class="p">))</span>
<span class="n">ax</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">y</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="n">legend</span><span class="p">(</span><span class="n">y</span><span class="p">.</span><span class="n">columns</span><span class="p">,</span> <span class="n">loc</span><span class="o">=</span><span class="s">'lower left'</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="n">set_title</span><span class="p">(</span><span class="s">'Deaths of Malaria among age groups through 1990 to 2016'</span><span class="p">,</span> 
              <span class="n">fontdict</span> <span class="o">=</span> <span class="p">{</span><span class="s">'fontsize'</span><span class="p">:</span><span class="mi">25</span><span class="p">})</span>
<span class="n">ax</span><span class="p">.</span><span class="n">set_xlabel</span><span class="p">(</span><span class="s">'Year'</span><span class="p">,</span><span class="n">fontdict</span> <span class="o">=</span> <span class="p">{</span><span class="s">'fontsize'</span><span class="p">:</span><span class="mi">13</span><span class="p">})</span>
<span class="n">ax</span><span class="p">.</span><span class="n">set_ylabel</span><span class="p">(</span><span class="s">'Number of people (millions)'</span><span class="p">,</span> <span class="n">fontdict</span> <span class="o">=</span> <span class="p">{</span><span class="s">'fontsize'</span><span class="p">:</span><span class="mi">13</span><span class="p">})</span>
<span class="n">ax</span><span class="p">.</span><span class="n">set_facecolor</span><span class="p">(</span><span class="s">'whitesmoke'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span></code></pre></figure>

<h3 id="visualizations-2">visualizations</h3>
<p><img src="/images/HW3/death_age.png" alt="Deaths of countries" />
<em>Deaths of Malaria among age groups through 1990 to 2016</em></p>

<p><br />
As it is shown in the figure, The age group <code class="language-plaintext highlighter-rouge">Under 5</code> takes the largest portion of the total death cases, which matched the theory that children under the age of five and pregnant women are the two demographics most at risk of severe infection. It also even did not show a significant decreasing pattern comparing to the cases 30 years ago. Vulnerable groups are not only more susceptible to infection, but also more difficult to restore health. This requires the tilt of more social resources.</p>

<!-- https://medium.com/using-specialist-business-databases/creating-a-choropleth-map-using-geopandas-and-financial-data-c76419258746 -->
:ET