I"žO<p>Hello, welcome to my blog! This post will share the data normalization of <strong><a href="https://github.com/rfordatascience/tidytuesday/tree/master/data/2020/2020-01-21">Spotify Dataset</a></strong>.</p>

<p>Please visit my <strong><a href="https://github.com/eveyimi/eveyimi.github.io">GitHub</a></strong> for more information.</p>

<h1 id="normal-forms">Normal Forms</h1>

<blockquote>
  <p>Every table should not have any duplication or dependencies that are not key or domain constraints</p>

  <p><strong>First Normal Form (1NF):</strong> If a relation contain composite or multi-valued attribute, it violates first normal form or a relation is in first normal form if it does not contain any composite or multi-valued attribute. A relation is in first normal form if every attribute in that relation is singled valued attribute.</p>

  <p><strong>Second Normal Form (2NF):</strong> To be in second normal form, a relation must be in first normal form and relation must not contain any partial dependency. A relation is in 2NF if it has No Partial Dependency, i.e., no non-prime attribute (attributes which are not part of any candidate key) is dependent on any proper subset of any candidate key of the table. Partial Dependency â€“ If the proper subset of candidate key determines non-prime attribute, it is called partial dependency.</p>

  <p><strong>Third Normal Form (3NF):</strong> A relation is in third normal form, if there is no transitive dependency for non-prime attributes as well as it is in second normal form. A relation is in 3NF if at least one of the following condition holds in every non-trivial function dependency X â€“&gt; Y:</p>
  <ol>
    <li>X is a super key.</li>
    <li>Y is a prime attribute (each element of Y is part of some candidate key).</li>
  </ol>

  <p><cite>GeeksforGeeks</cite></p>
</blockquote>

<p><br /></p>

<h1 id="dataset-overview">Dataset Overview</h1>
<p>I use the Spotify dataset from the source above. The data comes from Spotify via the spotifyr package. Charlie Thompson, Josiah Parry, Donal Phipps, and Tom Wolff authored this package to make it easier to get either your own data or general metadata arounds songs from Spotifyâ€™s API. We can use the code below to get the data and look into the info. We can see that there are 23 columns and 32833 entries.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="n">pd</span><span class="p">.</span><span class="n">set_option</span><span class="p">(</span><span class="s">'display.max_columns'</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
<span class="n">pd</span><span class="p">.</span><span class="n">set_option</span><span class="p">(</span><span class="s">'display.max_rows'</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
<span class="n">all_data</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s">"https://raw.githubusercontent.com/rfordatascience
                        /tidytuesday/master/data/2020/2020-01-21/spotify_songs.csv"</span><span class="p">)</span>
<span class="n">all_data</span><span class="p">.</span><span class="n">info</span><span class="p">()</span></code></pre></figure>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    RangeIndex: 32833 entries, 0 to 32832
    Data columns (total 23 columns):
    #   Column                    Non-Null Count  Dtype  
    ---  ------                    --------------  -----  
    0   track_id                  32833 non-null  object 
    1   track_name                32828 non-null  object 
    2   track_artist              32828 non-null  object 
    3   track_popularity          32833 non-null  int64  
    4   track_album_id            32833 non-null  object 
    5   track_album_name          32828 non-null  object 
    6   track_album_release_date  32833 non-null  object 
    7   playlist_name             32833 non-null  object 
    8   playlist_id               32833 non-null  object 
    9   playlist_genre            32833 non-null  object 
    10  playlist_subgenre         32833 non-null  object 
    11  danceability              32833 non-null  float64
    12  energy                    32833 non-null  float64
    13  key                       32833 non-null  int64  
    14  loudness                  32833 non-null  float64
    15  mode                      32833 non-null  int64  
    16  speechiness               32833 non-null  float64
    17  acousticness              32833 non-null  float64
    18  instrumentalness          32833 non-null  float64
    19  liveness                  32833 non-null  float64
    20  valence                   32833 non-null  float64
    21  tempo                     32833 non-null  float64
    22  duration_ms               32833 non-null  int64  
    dtypes: float64(9), int64(4), object(10) &lt;!-- table or not --&gt;
</code></pre></div></div>

<p><br /></p>

<h1 id="normalization">Normalization</h1>

<h2 id="1-first-normal-form-1nf">1. First Normal Form (1NF)</h2>
<p>There is no composite or multi-valued attribute, so that it follow first normal form. We donâ€™t have to split composite entries.</p>

<h2 id="2-second-normal-form-2nf">2. Second Normal Form (2NF)</h2>
<p>For 2NF, we need to break partial dependencies by identifing candidate PK for each row. If there is a composite PK, see if other columns have partial dependencies. First of all find if there is a composite PK. Though it seems like <code class="language-plaintext highlighter-rouge">track_id</code> is the PK, however, if we drop the duplicates of column <code class="language-plaintext highlighter-rouge">track_id</code>, we can find that there are duplicate rows it is actually not the PK. Another two columns whose name include â€˜idâ€™ also can not be the primary key alone for the same reason. Hense, there must exist a composite PK. I then tries to permutate <code class="language-plaintext highlighter-rouge">track_id</code> and <code class="language-plaintext highlighter-rouge">track_album_id</code> and <code class="language-plaintext highlighter-rouge">playlist_id</code> to see if there could be a composite PK. Unfortunately, I still did not find the composite PK. The <code class="language-plaintext highlighter-rouge">playlist_subgenre</code> column called my attention then, and I found that <code class="language-plaintext highlighter-rouge">track_id</code>, <code class="language-plaintext highlighter-rouge">track_album_id</code> and <code class="language-plaintext highlighter-rouge">playlist_subgenre</code> together become a composite PK. However, it is clear that other exist partial dependecies since there are roughly three fields: track info, album info and genre. We need to split the table into smaller tables. Specifically, for each song, its feature is unique, so we need to make <code class="language-plaintext highlighter-rouge">danceability</code>, <code class="language-plaintext highlighter-rouge">energy</code> and etc belong to track table. Then we shall find that genre table actually has a composite PK which includes <code class="language-plaintext highlighter-rouge">track_id</code> and <code class="language-plaintext highlighter-rouge">playlist_subgenre</code>, and <code class="language-plaintext highlighter-rouge">playlist_subgenre</code> is the PK of genre_sub table. Thus, for 2NF, I decided to split the table as followed:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">track</code>: â€˜track_idâ€™ (single PK), â€˜track_nameâ€™, â€˜track_artistâ€™, â€˜track_popularityâ€™, 
         â€˜danceabilityâ€™, â€˜energyâ€™, â€˜keyâ€™, â€˜loudnessâ€™, â€˜modeâ€™, â€˜speechinessâ€™,â€™acousticnessâ€™,
         â€˜instrumentalnessâ€™, â€˜livenessâ€™, â€˜valenceâ€™, â€˜tempoâ€™, â€˜duration_msâ€™;</li>
  <li><code class="language-plaintext highlighter-rouge">album</code>: â€˜track_album_idâ€™ (single PK), â€˜track_album_nameâ€™, â€˜track_album_release_dateâ€™;</li>
  <li><code class="language-plaintext highlighter-rouge">genre</code>: [â€˜track_idâ€™, â€˜playlist_subgenreâ€™] (composite PK), â€˜playlist_nameâ€™, â€˜playlist_idâ€™;</li>
  <li><code class="language-plaintext highlighter-rouge">genre_sub</code>: â€˜playlist_subgenreâ€™ (PK), â€˜playlist_genreâ€™;
<br />
And there also should be a table that connects <code class="language-plaintext highlighter-rouge">track</code>, <code class="language-plaintext highlighter-rouge">album</code> and <code class="language-plaintext highlighter-rouge">genre</code>:</li>
  <li><code class="language-plaintext highlighter-rouge">composite</code>: â€˜track_idâ€™, â€˜track_album_idâ€™, â€˜playlist_subgenreâ€™;</li>
</ul>

<h2 id="3-third-normal-form-3nf">3. Third Normal Form (3NF)</h2>
<p>For 2NF, we need to remove transitive dependencies. Based on 2NF results, we should find that there are transitive dependencies in table genre, where <code class="language-plaintext highlighter-rouge">playlist_name</code> depends on <code class="language-plaintext highlighter-rouge">playlist_id</code>. I then split them to follow the 3NF:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">track</code>: â€˜track_idâ€™ (single PK), â€˜track_nameâ€™, â€˜track_artistâ€™, â€˜track_popularityâ€™, 
         â€˜danceabilityâ€™, â€˜energyâ€™, â€˜keyâ€™, â€˜loudnessâ€™, â€˜modeâ€™, â€˜speechinessâ€™,â€™acousticnessâ€™,
         â€˜instrumentalnessâ€™, â€˜livenessâ€™, â€˜valenceâ€™, â€˜tempoâ€™, â€˜duration_msâ€™;</li>
  <li><code class="language-plaintext highlighter-rouge">album</code>: â€˜track_album_idâ€™ (single PK), â€˜track_album_nameâ€™, â€˜track_album_release_dateâ€™;</li>
  <li><code class="language-plaintext highlighter-rouge">genre</code>: [â€˜track_idâ€™, â€˜playlist_subgenreâ€™] (composite PK), â€˜playlist_idâ€™;</li>
  <li><code class="language-plaintext highlighter-rouge">playlist</code>: â€˜playlist_idâ€™ (PK), â€˜playlist_nameâ€™;</li>
  <li><code class="language-plaintext highlighter-rouge">genre_sub</code>: â€˜playlist_subgenreâ€™ (PK), â€˜playlist_genreâ€™;
<br />
And there also should be a table that connects <code class="language-plaintext highlighter-rouge">track</code>, <code class="language-plaintext highlighter-rouge">album</code> and <code class="language-plaintext highlighter-rouge">genre</code>:</li>
  <li><code class="language-plaintext highlighter-rouge">composite</code>: â€˜track_idâ€™, â€˜track_album_idâ€™, â€˜playlist_subgenreâ€™;</li>
</ul>

<h2 id="populate-tables">Populate tables</h2>
<h3 id="track">track</h3>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">df_track</span> <span class="o">=</span> <span class="n">df</span><span class="p">.</span><span class="n">iloc</span><span class="p">[:,</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">11</span><span class="p">,</span><span class="mi">12</span><span class="p">,</span><span class="mi">13</span><span class="p">,</span><span class="mi">14</span><span class="p">,</span><span class="mi">15</span><span class="p">,</span><span class="mi">16</span><span class="p">,</span><span class="mi">17</span><span class="p">,</span><span class="mi">18</span><span class="p">,</span><span class="mi">19</span><span class="p">,</span><span class="mi">20</span><span class="p">,</span><span class="mi">21</span><span class="p">,</span><span class="mi">22</span><span class="p">]].</span><span class="n">drop_duplicates</span><span class="p">()</span>
<span class="n">df_track</span></code></pre></figure>

<p><img src="/images/HW4/1.png" alt="1" />
<em>Track</em></p>

<h3 id="album">album</h3>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">df_album</span> <span class="o">=</span> <span class="n">df</span><span class="p">.</span><span class="n">iloc</span><span class="p">[:,</span> <span class="mi">4</span><span class="p">:</span><span class="mi">8</span><span class="p">].</span><span class="n">drop_duplicates</span><span class="p">()</span>
<span class="n">df_album</span></code></pre></figure>

<p><img src="/images/HW4/2.png" alt="2" />
<em>Album</em></p>

<h3 id="genre">genre</h3>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">df_genre</span> <span class="o">=</span> <span class="n">df</span><span class="p">.</span><span class="n">iloc</span><span class="p">[:,</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">8</span><span class="p">]].</span><span class="n">drop_duplicates</span><span class="p">()</span>
<span class="n">df_genre</span></code></pre></figure>

<p><img src="/images/HW4/3.png" alt="3" />
<em>Genre</em></p>

<h3 id="playlist">playlist</h3>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">df_playlist</span> <span class="o">=</span> <span class="n">df</span><span class="p">.</span><span class="n">iloc</span><span class="p">[:,</span> <span class="p">[</span><span class="mi">8</span><span class="p">,</span><span class="mi">7</span><span class="p">]].</span><span class="n">drop_duplicates</span><span class="p">()</span>
<span class="n">df_playlist</span></code></pre></figure>

<p><img src="/images/HW4/4.png" alt="4" />
<em>Playlist</em></p>

<h3 id="genre_sub">genre_sub</h3>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">df_genre_sub</span> <span class="o">=</span> <span class="n">df</span><span class="p">.</span><span class="n">iloc</span><span class="p">[:,</span> <span class="p">[</span><span class="mi">10</span><span class="p">,</span><span class="mi">9</span><span class="p">]].</span><span class="n">drop_duplicates</span><span class="p">()</span>
<span class="n">df_genre_sub</span></code></pre></figure>

<p><img src="/images/HW4/5.png" alt="5" />
<em>Genre Sub</em></p>

<h3 id="composite">composite</h3>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">df_composite</span> <span class="o">=</span> <span class="n">df</span><span class="p">.</span><span class="n">iloc</span><span class="p">[:,</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">10</span><span class="p">]].</span><span class="n">drop_duplicates</span><span class="p">()</span>
<span class="n">df_composite</span></code></pre></figure>

<p><img src="/images/HW4/6.png" alt="6" />
<em>Composite</em></p>

<h1 id="sql-query">SQL Query</h1>
<p>First use sqlite3 package to store data:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">sqlite3</span>
<span class="n">conn</span> <span class="o">=</span> <span class="n">sqlite3</span><span class="p">.</span><span class="n">connect</span><span class="p">(</span><span class="s">'spotify.db'</span><span class="p">)</span>
<span class="n">cur</span> <span class="o">=</span> <span class="n">conn</span><span class="p">.</span><span class="n">cursor</span><span class="p">()</span>
<span class="n">df_track</span><span class="p">.</span><span class="n">to_sql</span><span class="p">(</span><span class="s">'track'</span><span class="p">,</span> <span class="n">conn</span><span class="p">,</span> <span class="n">if_exists</span><span class="o">=</span><span class="s">'replace'</span><span class="p">,</span> <span class="n">index</span> <span class="o">=</span> <span class="bp">False</span><span class="p">)</span> 
<span class="n">df_album</span><span class="p">.</span><span class="n">to_sql</span><span class="p">(</span><span class="s">'album'</span><span class="p">,</span> <span class="n">conn</span><span class="p">,</span> <span class="n">if_exists</span><span class="o">=</span><span class="s">'replace'</span><span class="p">,</span> <span class="n">index</span> <span class="o">=</span> <span class="bp">False</span><span class="p">)</span>
<span class="n">df_genre</span><span class="p">.</span><span class="n">to_sql</span><span class="p">(</span><span class="s">'genre'</span><span class="p">,</span> <span class="n">conn</span><span class="p">,</span> <span class="n">if_exists</span><span class="o">=</span><span class="s">'replace'</span><span class="p">,</span> <span class="n">index</span> <span class="o">=</span> <span class="bp">False</span><span class="p">)</span>
<span class="n">df_playlist</span><span class="p">.</span><span class="n">to_sql</span><span class="p">(</span><span class="s">'playlist'</span><span class="p">,</span> <span class="n">conn</span><span class="p">,</span> <span class="n">if_exists</span><span class="o">=</span><span class="s">'replace'</span><span class="p">,</span> <span class="n">index</span> <span class="o">=</span> <span class="bp">False</span><span class="p">)</span>
<span class="n">df_genre_sub</span><span class="p">.</span><span class="n">to_sql</span><span class="p">(</span><span class="s">'genre_sub'</span><span class="p">,</span> <span class="n">conn</span><span class="p">,</span> <span class="n">if_exists</span><span class="o">=</span><span class="s">'replace'</span><span class="p">,</span> <span class="n">index</span> <span class="o">=</span> <span class="bp">False</span><span class="p">)</span>
<span class="n">df_composite</span><span class="p">.</span><span class="n">to_sql</span><span class="p">(</span><span class="s">'composite'</span><span class="p">,</span> <span class="n">conn</span><span class="p">,</span> <span class="n">if_exists</span><span class="o">=</span><span class="s">'replace'</span><span class="p">,</span> <span class="n">index</span> <span class="o">=</span> <span class="bp">False</span><span class="p">)</span></code></pre></figure>

<p>Then use an SQL query to find the names of all playlists that contain instrumentals. First of all, we find that the average <code class="language-plaintext highlighter-rouge">instumentalness</code> is 0.085 and min and max are 0.000 and 0.994. So I set the threshold to be 0.08.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="o">%</span><span class="n">load_ext</span> <span class="n">sql</span>
<span class="o">%</span><span class="n">sql</span> <span class="n">sqlite</span><span class="p">:</span><span class="o">///</span><span class="n">spotify</span><span class="p">.</span><span class="n">db</span></code></pre></figure>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="o">%%</span><span class="n">sql</span>

<span class="n">SELECT</span> <span class="n">DISTINCT</span> <span class="n">playlist_name</span> 
<span class="n">FROM</span> <span class="n">playlist</span> <span class="n">INNER</span> <span class="n">JOIN</span> <span class="n">genre</span>
<span class="n">ON</span> <span class="n">playlist</span><span class="p">.</span><span class="n">playlist_id</span> <span class="o">=</span> <span class="n">genre</span><span class="p">.</span><span class="n">playlist_id</span>
<span class="n">INNER</span> <span class="n">JOIN</span> <span class="n">track</span>
<span class="n">ON</span> <span class="n">genre</span><span class="p">.</span><span class="n">track_id</span> <span class="o">=</span> <span class="n">track</span><span class="p">.</span><span class="n">track_id</span>
<span class="n">WHERE</span> <span class="n">instrumentalness</span> <span class="o">&gt;</span> <span class="mf">0.08</span>
<span class="n">LIMIT</span> <span class="mi">20</span><span class="p">;</span></code></pre></figure>

<p><img src="/images/HW4/7.png" alt="7" />
<em>The names of all playlists that contain instrumentals</em></p>

<!-- https://medium.com/using-specialist-business-databases/creating-a-choropleth-map-using-geopandas-and-financial-data-c76419258746 -->
:ET