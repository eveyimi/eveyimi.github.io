I"rr<p>Hello, welcome to my blog! This post will share the data manipulation of <strong><a href="https://swapi.dev/documentation">Star Wars Dataset</a></strong>.</p>

<p>Please visit my <strong><a href="https://github.com/eveyimi/eveyimi.github.io">GitHub</a></strong> for more information.</p>

<h1 id="introduction">Introduction</h1>
<p>The Star Wars API is the worldâ€™s first quantified and programmatically-formatted set of Star Wars data.</p>

<h1 id="consume-data">Consume data</h1>
<p>Using the below code to consume data using Star Wars API, we find that there are 82 people in total.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">base_url</span> <span class="o">=</span> <span class="s">'https://swapi.dev/api/people'</span>
<span class="n">resp</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="n">base_url</span><span class="p">)</span>
<span class="n">data</span> <span class="o">=</span> <span class="n">resp</span><span class="p">.</span><span class="n">json</span><span class="p">()</span></code></pre></figure>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    {'count': 82,
    'next': 'http://swapi.dev/api/people/?page=2',
    'previous': None,
    'results': [{'name': 'Luke Skywalker',
    'height': '172',
    'mass': '77',
    'hair_color': 'blond',
    'skin_color': 'fair',
    'eye_color': 'blue',
    'birth_year': '19BBY',
    'gender': 'male',
    'homeworld': 'http://swapi.dev/api/planets/1/',
    'films': ['http://swapi.dev/api/films/1/',
    'http://swapi.dev/api/films/2/',
    'http://swapi.dev/api/films/3/',
    'http://swapi.dev/api/films/6/'],
    'species': [],
    'vehicles': ['http://swapi.dev/api/vehicles/14/',
    'http://swapi.dev/api/vehicles/30/'],
    'starships': ['http://swapi.dev/api/starships/12/',
    'http://swapi.dev/api/starships/22/'],
    'created': '2014-12-09T13:50:51.644000Z',
    'edited': '2014-12-20T21:17:56.891000Z',
    'url': 'http://swapi.dev/api/people/1/'},
    {'name': 'C-3PO',
    'height': '167',
    'mass': '75',
    'hair_color': 'n/a',
    'skin_color': 'gold',
    'eye_color': 'yellow',
    'birth_year': '112BBY',
    'gender': 'n/a',
    'homeworld': 'http://swapi.dev/api/planets/1/',
    'films': ['http://swapi.dev/api/films/1/',
    'http://swapi.dev/api/films/2/',
    'http://swapi.dev/api/films/3/',
    'http://swapi.dev/api/films/4/',
    'http://swapi.dev/api/films/5/',
    'http://swapi.dev/api/films/6/'],
    'species': ['http://swapi.dev/api/species/2/'],
    'vehicles': [],
    'starships': [],
    'created': '2014-12-10T15:10:51.357000Z',
    'edited': '2014-12-20T21:17:50.309000Z',
    'url': 'http://swapi.dev/api/people/2/'},
    ... ...
</code></pre></div></div>

<p><br />
Then, try to consume them one by one until we get all 82 people data and use a list to store all the JSON data.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">people</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">count</span> <span class="o">=</span> <span class="mi">0</span> <span class="c1"># we will stop consuming until the count is 82
</span><span class="n">i</span> <span class="o">=</span> <span class="mi">1</span>
<span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
    <span class="n">r</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">base_url</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">i</span><span class="p">))).</span><span class="n">json</span><span class="p">()</span>
    <span class="k">if</span> <span class="n">r</span> <span class="o">==</span> <span class="p">{</span><span class="s">'detail'</span><span class="p">:</span> <span class="s">'Not found'</span><span class="p">}:</span>
        <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="k">continue</span>
    <span class="n">people</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">r</span><span class="p">)</span>
    <span class="n">count</span> <span class="o">+=</span> <span class="mi">1</span>
    <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
    <span class="k">if</span> <span class="n">count</span> <span class="o">==</span> <span class="n">data</span><span class="p">[</span><span class="s">'count'</span><span class="p">]:</span>
        <span class="k">break</span> </code></pre></figure>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    [{'name': 'Luke Skywalker',
    'height': '172',
    'mass': '77',
    'hair_color': 'blond',
    'skin_color': 'fair',
    'eye_color': 'blue',
    'birth_year': '19BBY',
    'gender': 'male',
    'homeworld': 'http://swapi.dev/api/planets/1/',
    'films': ['http://swapi.dev/api/films/1/',
    'http://swapi.dev/api/films/2/',
    'http://swapi.dev/api/films/3/',
    'http://swapi.dev/api/films/6/'],
    'species': [],
    'vehicles': ['http://swapi.dev/api/vehicles/14/',
    'http://swapi.dev/api/vehicles/30/'],
    'starships': ['http://swapi.dev/api/starships/12/',
    'http://swapi.dev/api/starships/22/'],
    'created': '2014-12-09T13:50:51.644000Z',
    'edited': '2014-12-20T21:17:56.891000Z',
    'url': 'http://swapi.dev/api/people/1/'},
    {'name': 'C-3PO',
    'height': '167',
    'mass': '75',
    'hair_color': 'n/a',
    'skin_color': 'gold',
    'eye_color': 'yellow',
    'birth_year': '112BBY',
    'gender': 'n/a',
    'homeworld': 'http://swapi.dev/api/planets/1/',
    'films': ['http://swapi.dev/api/films/1/',
    'http://swapi.dev/api/films/2/',
    'http://swapi.dev/api/films/3/',
    'http://swapi.dev/api/films/4/',
    'http://swapi.dev/api/films/5/',
    'http://swapi.dev/api/films/6/'],
    'species': ['http://swapi.dev/api/species/2/'],
    'vehicles': [],
    'starships': [],
    'created': '2014-12-10T15:10:51.357000Z',
    'edited': '2014-12-20T21:17:50.309000Z',
    'url': 'http://swapi.dev/api/people/2/'},
    {'name': 'R2-D2',
    'height': '96',
    'mass': '32',
    'hair_color': 'n/a',
    'skin_color': 'white, blue',
    'eye_color': 'red',
    'birth_year': '33BBY',
    'gender': 'n/a',
    'homeworld': 'http://swapi.dev/api/planets/8/',
    'films': ['http://swapi.dev/api/films/1/',
    'http://swapi.dev/api/films/2/',
    'http://swapi.dev/api/films/3/',
    'http://swapi.dev/api/films/4/',
    'http://swapi.dev/api/films/5/',
    'http://swapi.dev/api/films/6/'],
    'species': ['http://swapi.dev/api/species/2/'],
    'vehicles': [],
    'starships': [],
    'created': '2014-12-10T15:11:50.376000Z',
    'edited': '2014-12-20T21:17:50.311000Z',
    'url': 'http://swapi.dev/api/people/3/'},
    ... ...
</code></pre></div></div>

<p><br />
We are required to provide the name of films each people appeared in. The raw people data only contains the URL of the films as below.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">people</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="s">'films'</span><span class="p">]</span></code></pre></figure>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    ['http://swapi.dev/api/films/1/',
    'http://swapi.dev/api/films/2/',
    'http://swapi.dev/api/films/3/',
    'http://swapi.dev/api/films/6/']
</code></pre></div></div>

<p><br />
And each film API contains the below information, taking the first people as an example.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">requests</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="n">people</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="s">'films'</span><span class="p">][</span><span class="mi">0</span><span class="p">]).</span><span class="n">json</span><span class="p">()</span></code></pre></figure>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    {'title': 'A New Hope',
    'episode_id': 4,
    'opening_crawl': "It is a period of civil war.\r\nRebel spaceships, striking\r\nfrom a hidden base, have won\r\ntheir first victory against\r\nthe evil Galactic Empire.\r\n\r\nDuring the battle, Rebel\r\nspies managed to steal secret\r\nplans to the Empire's\r\nultimate weapon, the DEATH\r\nSTAR, an armored space\r\nstation with enough power\r\nto destroy an entire planet.\r\n\r\nPursued by the Empire's\r\nsinister agents, Princess\r\nLeia races home aboard her\r\nstarship, custodian of the\r\nstolen plans that can save her\r\npeople and restore\r\nfreedom to the galaxy....",
    'director': 'George Lucas',
    'producer': 'Gary Kurtz, Rick McCallum',
    'release_date': '1977-05-25',
    'characters': ['http://swapi.dev/api/people/1/',
    'http://swapi.dev/api/people/2/',
    'http://swapi.dev/api/people/3/',
    'http://swapi.dev/api/people/4/',
    'http://swapi.dev/api/people/5/',
</code></pre></div></div>

<p><br />
We need to use the request library again to get all the names.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="s">'count'</span><span class="p">]):</span>
    <span class="n">people</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="s">'film_name'</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">people</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="s">'films'</span><span class="p">]:</span>
        <span class="n">film</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="n">item</span><span class="p">).</span><span class="n">json</span><span class="p">()</span>
        <span class="n">people</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="s">'film_name'</span><span class="p">].</span><span class="n">append</span><span class="p">(</span><span class="n">film</span><span class="p">[</span><span class="s">'title'</span><span class="p">])</span>     </code></pre></figure>

<p><br />
Then we transfrom the JSON data into a dataframe.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">json_normalize</span><span class="p">(</span><span class="n">people</span><span class="p">)</span></code></pre></figure>

<p><img src="/images/HW5/1.png" alt="1" />
<em>Dataframe - 1</em>
<img src="/images/HW5/2.png" alt="1" />
<em>Dataframe - 2</em></p>

<h1 id="the-oldest-person">The oldest person</h1>
<p>BBY means Before the Battle of Yavin. If we want to find out the oldest person, we need to find the person with the biggest number before BBY. First we need to remove the <code class="language-plaintext highlighter-rouge">BBY</code> from the birth yeas. Then we can find the index of the oldest person.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">df_birth</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="n">df</span><span class="p">[</span><span class="s">'birth_year'</span><span class="p">].</span><span class="nb">str</span><span class="p">.</span><span class="n">contains</span><span class="p">(</span><span class="s">"BBY"</span><span class="p">)]</span>
<span class="n">idx</span> <span class="o">=</span> <span class="n">df_birth</span><span class="p">[(</span><span class="n">df_birth</span><span class="p">[</span><span class="s">'birth_year'</span><span class="p">]</span><span class="o">==</span><span class="nb">max</span><span class="p">(</span><span class="n">df_birth</span><span class="p">[</span><span class="s">'birth_year'</span><span class="p">]))].</span><span class="n">index</span></code></pre></figure>

<p>We then use the index to find the peopleâ€™s name, which is <code class="language-plaintext highlighter-rouge">Yoda</code>.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">df_birth</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">idx</span><span class="p">][</span><span class="s">'name'</span><span class="p">].</span><span class="n">to_list</span><span class="p">()[</span><span class="mi">0</span><span class="p">]</span></code></pre></figure>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    'Yoda'
</code></pre></div></div>

<p>Then we can figure out the titles of all the films she appeared in.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">df_birth</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">idx</span><span class="p">][</span><span class="s">'film_name'</span><span class="p">].</span><span class="n">to_list</span><span class="p">()</span></code></pre></figure>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    [['The Empire Strikes Back',
    'Return of the Jedi',
    'The Phantom Menace',
    'Attack of the Clones',
    'Revenge of the Sith']]
</code></pre></div></div>

<h2 id="1-first-normal-form-1nf">1. First Normal Form (1NF)</h2>
<p>There is no composite or multi-valued attribute, so that it follow first normal form. We donâ€™t have to split composite entries.</p>

<h2 id="2-second-normal-form-2nf">2. Second Normal Form (2NF)</h2>
<p>For 2NF, we need to break partial dependencies by identifing candidate PK for each row. If there is a composite PK, see if other columns have partial dependencies. First of all find if there is a composite PK. Though it seems like <code class="language-plaintext highlighter-rouge">track_id</code> is the PK, however, if we drop the duplicates of column <code class="language-plaintext highlighter-rouge">track_id</code>, we can find that there are duplicate rows it is actually not the PK. Another two columns whose name include â€˜idâ€™ also can not be the primary key alone for the same reason. Hense, there must exist a composite PK. I then tries to permutate <code class="language-plaintext highlighter-rouge">track_id</code> and <code class="language-plaintext highlighter-rouge">track_album_id</code> and <code class="language-plaintext highlighter-rouge">playlist_id</code> to see if there could be a composite PK. Unfortunately, I still did not find the composite PK. The <code class="language-plaintext highlighter-rouge">playlist_subgenre</code> column called my attention then, and I found that <code class="language-plaintext highlighter-rouge">track_id</code>, <code class="language-plaintext highlighter-rouge">track_album_id</code> and <code class="language-plaintext highlighter-rouge">playlist_subgenre</code> together become a composite PK. However, it is clear that other exist partial dependecies since there are roughly three fields: track info, album info and genre. We need to split the table into smaller tables. Specifically, for each song, its feature is unique, so we need to make <code class="language-plaintext highlighter-rouge">danceability</code>, <code class="language-plaintext highlighter-rouge">energy</code> and etc belong to track table. Then we shall find that genre table actually has a composite PK which includes <code class="language-plaintext highlighter-rouge">track_id</code> and <code class="language-plaintext highlighter-rouge">playlist_subgenre</code>, and <code class="language-plaintext highlighter-rouge">playlist_subgenre</code> is the PK of genre_sub table. Thus, for 2NF, I decided to split the table as followed:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">track</code>: â€˜track_idâ€™ (single PK), â€˜track_nameâ€™, â€˜track_artistâ€™, â€˜track_popularityâ€™, 
         â€˜danceabilityâ€™, â€˜energyâ€™, â€˜keyâ€™, â€˜loudnessâ€™, â€˜modeâ€™, â€˜speechinessâ€™,â€™acousticnessâ€™,
         â€˜instrumentalnessâ€™, â€˜livenessâ€™, â€˜valenceâ€™, â€˜tempoâ€™, â€˜duration_msâ€™;</li>
  <li><code class="language-plaintext highlighter-rouge">album</code>: â€˜track_album_idâ€™ (single PK), â€˜track_album_nameâ€™, â€˜track_album_release_dateâ€™;</li>
  <li><code class="language-plaintext highlighter-rouge">genre</code>: [â€˜track_idâ€™, â€˜playlist_subgenreâ€™] (composite PK), â€˜playlist_nameâ€™, â€˜playlist_idâ€™;</li>
  <li><code class="language-plaintext highlighter-rouge">genre_sub</code>: â€˜playlist_subgenreâ€™ (PK), â€˜playlist_genreâ€™;
<br />
And there also should be a table that connects <code class="language-plaintext highlighter-rouge">track</code>, <code class="language-plaintext highlighter-rouge">album</code> and <code class="language-plaintext highlighter-rouge">genre</code>:</li>
  <li><code class="language-plaintext highlighter-rouge">composite</code>: â€˜track_idâ€™, â€˜track_album_idâ€™, â€˜playlist_subgenreâ€™;</li>
</ul>

<h2 id="3-third-normal-form-3nf">3. Third Normal Form (3NF)</h2>
<p>For 2NF, we need to remove transitive dependencies. Based on 2NF results, we should find that there are transitive dependencies in table genre, where <code class="language-plaintext highlighter-rouge">playlist_name</code> depends on <code class="language-plaintext highlighter-rouge">playlist_id</code>. I then split them to follow the 3NF:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">track</code>: â€˜track_idâ€™ (single PK), â€˜track_nameâ€™, â€˜track_artistâ€™, â€˜track_popularityâ€™, 
         â€˜danceabilityâ€™, â€˜energyâ€™, â€˜keyâ€™, â€˜loudnessâ€™, â€˜modeâ€™, â€˜speechinessâ€™,â€™acousticnessâ€™,
         â€˜instrumentalnessâ€™, â€˜livenessâ€™, â€˜valenceâ€™, â€˜tempoâ€™, â€˜duration_msâ€™;</li>
  <li><code class="language-plaintext highlighter-rouge">album</code>: â€˜track_album_idâ€™ (single PK), â€˜track_album_nameâ€™, â€˜track_album_release_dateâ€™;</li>
  <li><code class="language-plaintext highlighter-rouge">genre</code>: [â€˜track_idâ€™, â€˜playlist_subgenreâ€™] (composite PK), â€˜playlist_idâ€™;</li>
  <li><code class="language-plaintext highlighter-rouge">playlist</code>: â€˜playlist_idâ€™ (PK), â€˜playlist_nameâ€™;</li>
  <li><code class="language-plaintext highlighter-rouge">genre_sub</code>: â€˜playlist_subgenreâ€™ (PK), â€˜playlist_genreâ€™;
<br />
And there also should be a table that connects <code class="language-plaintext highlighter-rouge">track</code>, <code class="language-plaintext highlighter-rouge">album</code> and <code class="language-plaintext highlighter-rouge">genre</code>:</li>
  <li><code class="language-plaintext highlighter-rouge">composite</code>: â€˜track_idâ€™, â€˜track_album_idâ€™, â€˜playlist_subgenreâ€™;</li>
</ul>

<h2 id="populate-tables">Populate tables</h2>
<h3 id="track">track</h3>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">df_track</span> <span class="o">=</span> <span class="n">df</span><span class="p">.</span><span class="n">iloc</span><span class="p">[:,</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">11</span><span class="p">,</span><span class="mi">12</span><span class="p">,</span><span class="mi">13</span><span class="p">,</span><span class="mi">14</span><span class="p">,</span><span class="mi">15</span><span class="p">,</span><span class="mi">16</span><span class="p">,</span><span class="mi">17</span><span class="p">,</span><span class="mi">18</span><span class="p">,</span><span class="mi">19</span><span class="p">,</span><span class="mi">20</span><span class="p">,</span><span class="mi">21</span><span class="p">,</span><span class="mi">22</span><span class="p">]].</span><span class="n">drop_duplicates</span><span class="p">()</span>
<span class="n">df_track</span></code></pre></figure>

<p><img src="/images/HW4/1.png" alt="1" />
<em>Track</em></p>

<h3 id="album">album</h3>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">df_album</span> <span class="o">=</span> <span class="n">df</span><span class="p">.</span><span class="n">iloc</span><span class="p">[:,</span> <span class="mi">4</span><span class="p">:</span><span class="mi">8</span><span class="p">].</span><span class="n">drop_duplicates</span><span class="p">()</span>
<span class="n">df_album</span></code></pre></figure>

<p><img src="/images/HW4/2.png" alt="2" />
<em>Album</em></p>

<h3 id="genre">genre</h3>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">df_genre</span> <span class="o">=</span> <span class="n">df</span><span class="p">.</span><span class="n">iloc</span><span class="p">[:,</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">8</span><span class="p">]].</span><span class="n">drop_duplicates</span><span class="p">()</span>
<span class="n">df_genre</span></code></pre></figure>

<p><img src="/images/HW4/3.png" alt="3" />
<em>Genre</em></p>

<h3 id="playlist">playlist</h3>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">df_playlist</span> <span class="o">=</span> <span class="n">df</span><span class="p">.</span><span class="n">iloc</span><span class="p">[:,</span> <span class="p">[</span><span class="mi">8</span><span class="p">,</span><span class="mi">7</span><span class="p">]].</span><span class="n">drop_duplicates</span><span class="p">()</span>
<span class="n">df_playlist</span></code></pre></figure>

<p><img src="/images/HW4/4.png" alt="4" />
<em>Playlist</em></p>

<h3 id="genre_sub">genre_sub</h3>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">df_genre_sub</span> <span class="o">=</span> <span class="n">df</span><span class="p">.</span><span class="n">iloc</span><span class="p">[:,</span> <span class="p">[</span><span class="mi">10</span><span class="p">,</span><span class="mi">9</span><span class="p">]].</span><span class="n">drop_duplicates</span><span class="p">()</span>
<span class="n">df_genre_sub</span></code></pre></figure>

<p><img src="/images/HW4/5.png" alt="5" />
<em>Genre Sub</em></p>

<h3 id="composite">composite</h3>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">df_composite</span> <span class="o">=</span> <span class="n">df</span><span class="p">.</span><span class="n">iloc</span><span class="p">[:,</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">10</span><span class="p">]].</span><span class="n">drop_duplicates</span><span class="p">()</span>
<span class="n">df_composite</span></code></pre></figure>

<p><img src="/images/HW4/6.png" alt="6" />
<em>Composite</em></p>

<h1 id="sql-query">SQL Query</h1>
<p>First use sqlite3 package to store data:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">sqlite3</span>
<span class="n">conn</span> <span class="o">=</span> <span class="n">sqlite3</span><span class="p">.</span><span class="n">connect</span><span class="p">(</span><span class="s">'spotify.db'</span><span class="p">)</span>

<span class="n">df_track</span><span class="p">.</span><span class="n">to_sql</span><span class="p">(</span><span class="s">'track'</span><span class="p">,</span> <span class="n">conn</span><span class="p">,</span> <span class="n">if_exists</span><span class="o">=</span><span class="s">'replace'</span><span class="p">,</span> <span class="n">index</span> <span class="o">=</span> <span class="bp">False</span><span class="p">)</span> 
<span class="n">df_album</span><span class="p">.</span><span class="n">to_sql</span><span class="p">(</span><span class="s">'album'</span><span class="p">,</span> <span class="n">conn</span><span class="p">,</span> <span class="n">if_exists</span><span class="o">=</span><span class="s">'replace'</span><span class="p">,</span> <span class="n">index</span> <span class="o">=</span> <span class="bp">False</span><span class="p">)</span>
<span class="n">df_genre</span><span class="p">.</span><span class="n">to_sql</span><span class="p">(</span><span class="s">'genre'</span><span class="p">,</span> <span class="n">conn</span><span class="p">,</span> <span class="n">if_exists</span><span class="o">=</span><span class="s">'replace'</span><span class="p">,</span> <span class="n">index</span> <span class="o">=</span> <span class="bp">False</span><span class="p">)</span>
<span class="n">df_playlist</span><span class="p">.</span><span class="n">to_sql</span><span class="p">(</span><span class="s">'playlist'</span><span class="p">,</span> <span class="n">conn</span><span class="p">,</span> <span class="n">if_exists</span><span class="o">=</span><span class="s">'replace'</span><span class="p">,</span> <span class="n">index</span> <span class="o">=</span> <span class="bp">False</span><span class="p">)</span>
<span class="n">df_genre_sub</span><span class="p">.</span><span class="n">to_sql</span><span class="p">(</span><span class="s">'genre_sub'</span><span class="p">,</span> <span class="n">conn</span><span class="p">,</span> <span class="n">if_exists</span><span class="o">=</span><span class="s">'replace'</span><span class="p">,</span> <span class="n">index</span> <span class="o">=</span> <span class="bp">False</span><span class="p">)</span>
<span class="n">df_composite</span><span class="p">.</span><span class="n">to_sql</span><span class="p">(</span><span class="s">'composite'</span><span class="p">,</span> <span class="n">conn</span><span class="p">,</span> <span class="n">if_exists</span><span class="o">=</span><span class="s">'replace'</span><span class="p">,</span> <span class="n">index</span> <span class="o">=</span> <span class="bp">False</span><span class="p">)</span></code></pre></figure>

<p>Then use an SQL query to find the names of all playlists that contain instrumentals. First of all, we find that the average <code class="language-plaintext highlighter-rouge">instumentalness</code> is 0.085 and min and max are 0.000 and 0.994. So I set the threshold to be 0.08.</p>

<figure class="highlight"><pre><code class="language-sql" data-lang="sql"><span class="o">%</span><span class="n">load_ext</span> <span class="k">sql</span>
<span class="o">%</span><span class="k">sql</span> <span class="n">sqlite</span><span class="p">:</span><span class="o">///</span><span class="n">spotify</span><span class="p">.</span><span class="n">db</span></code></pre></figure>

<figure class="highlight"><pre><code class="language-sql" data-lang="sql"><span class="o">%%</span><span class="k">sql</span>

<span class="k">SELECT</span> <span class="k">DISTINCT</span> <span class="n">playlist_name</span> 
<span class="k">FROM</span> <span class="n">playlist</span> <span class="k">INNER</span> <span class="k">JOIN</span> <span class="n">genre</span>
<span class="k">ON</span> <span class="n">playlist</span><span class="p">.</span><span class="n">playlist_id</span> <span class="o">=</span> <span class="n">genre</span><span class="p">.</span><span class="n">playlist_id</span>
<span class="k">INNER</span> <span class="k">JOIN</span> <span class="n">track</span>
<span class="k">ON</span> <span class="n">genre</span><span class="p">.</span><span class="n">track_id</span> <span class="o">=</span> <span class="n">track</span><span class="p">.</span><span class="n">track_id</span>
<span class="k">WHERE</span> <span class="n">instrumentalness</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">.</span><span class="mi">08</span>
<span class="k">LIMIT</span> <span class="mi">20</span><span class="p">;</span></code></pre></figure>

<p><img src="/images/HW4/7.png" alt="7" />
<em>The names of all playlists that contain instrumentals</em></p>

<!-- https://medium.com/using-specialist-business-databases/creating-a-choropleth-map-using-geopandas-and-financial-data-c76419258746 -->
:ET