I"><p>Hello, welcome to my blog! This post will share the data visualizations of <strong><a href="https://github.com/rfordatascience/tidytuesday/tree/master/data/2018/2018-11-13">Malaria Dataset</a></strong>.</p>

<p>Please visit my <strong><a href="https://github.com/eveyimi/eveyimi.github.io">GitHub</a></strong> for more information.</p>

<h1 id="about-malaria">About Malaria</h1>

<blockquote>
  <p>Malaria is a disease caused by parasitic single-celled organisms of the genus Plasmodium. These are transmitted between people via bites from Anopheles mosquitoes. Once in the blood stream, the parasites invade the host’s red blood cells. Here, the parasites have a measure of protection from the body’s immune system and are able to multiply. Periodically and synchronously, the parasites burst out of their host cells into the blood stream and invade further red blood cells. The periodicity of this cycle varies with different species of the parasite but typically occur every two or three days and may be associated with the characteristic symptoms of malaria: repeating bouts of high fever and illness. Long-term infection leads to damage to internal organs and chronic anaemia arising from the destruction of the blood cells. Children under the age of five and pregnant women are the two demographics most at risk of severe infection.
Malaria has plagued humanity throughout history and remains one of the biggest causes of death and morbidity. The World Health Organization considers nearly half the world’s population at risk, with an estimated 216 million new cases and 445,000 deaths in 2016, mostly in sub-Saharan Africa. Since 2000, a huge international effort has provided interventions such as bed nets, insecticides, and drugs across the malaria-endemic world to tackle the disease. Knowledge of the spatial distribution of malaria through time is key to targeting these resources effectively and to inform future control planning.
The World Health Organization (WHO) considers nearly half the world’s population at risk from Malaria, with an estimated 216 million new cases and 445,000 deaths in 2016, mostly in sub-Saharan Africa. But after decades of neglect, efforts to combat the disease have entered an unprecedented era - it is high on the policy agenda, and a growing body of evidence points towards important reductions in illness and death. The global effort to eradicate malaria depends on researchers and policymakers being able to access and use the data that is being generated about the disease and interventions to control it.</p>

  <p><cite>George Bernard Shaw</cite></p>
</blockquote>

<h1 id="three-problems-i-chose">Three problems I chose</h1>

<h2 id="13-large-sum-solved-by-225164">13. Large sum (Solved by 225,164)</h2>

<h3 id="question">question</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Work out the first ten digits of the sum of the following one-hundred 50-digit numbers.
    37107287533902102798797998220837590246510135740250
    46376937677490009712648124896970078050417018260538
    74324986199524741059474233309513058123726617309629
    91942213363574161572522430563301811072406154908250
    23067588207539346171171980310421047513778063246676
    89261670696623633820136378418383684178734361726757
    28112879812849979408065481931592621691275889832738
    44274228917432520321923589422876796487670272189318
    47451445736001306439091167216856844588711603153276
    70386486105843025439939619828917593665686757934951
    ...
    *a hundred line*
</code></pre></div></div>

<p><br /></p>

<h3 id="approach">approach</h3>
<p>I saved those one-hundred 50-digit numbers into a text file and read all lines. Using function <code class="language-plaintext highlighter-rouge">largeSum</code> I am able to convert the list of number strings into a list of int numbers and get the int sum of them. After converting the int sum into string sum, I can take the first 10 digits.</p>

<h3 id="code">code</h3>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">largeSum</span><span class="p">(</span><span class="n">lines</span><span class="p">):</span>
    <span class="s">"""A function used to calculate the first ten digits of the sum of numbers.

    Parameters
    ----------
    lines : list of str
        A list of numbers, which are str type first and should be convert to int. 
    
    Returns
    -------
    str
        Calculate the sum of the following one-hundred 50-digit numbers, convert the int into str and return the first ten digits.
    
    Examples
    --------
    &gt;&gt;&gt; lines = ['11111111111', '22222222222']
    &gt;&gt;&gt; largeSum(lines)
    3333333333

    """</span>
    <span class="k">return</span> <span class="nb">str</span><span class="p">(</span><span class="nb">sum</span><span class="p">([</span><span class="nb">int</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">lines</span><span class="p">]))[:</span><span class="mi">10</span><span class="p">]</span></code></pre></figure>

<h3 id="result">result</h3>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">"__main__"</span><span class="p">:</span>
    <span class="n">f</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">"number.txt"</span><span class="p">)</span>
    <span class="n">lines</span> <span class="o">=</span> <span class="n">f</span><span class="p">.</span><span class="n">readlines</span><span class="p">()</span>
    <span class="k">print</span><span class="p">(</span><span class="n">largeSum</span><span class="p">(</span><span class="n">lines</span><span class="p">))</span>
    <span class="n">f</span><span class="p">.</span><span class="n">close</span><span class="p">()</span> 
<span class="c1"># 5537376230</span></code></pre></figure>

<p>The result of the first ten digits of the sum of the one-hundred 50-digit numbers give is <em>5537376230</em>.</p>

<p><br /></p>

<h2 id="31-coin-sums-solved-by-83763">31. Coin sums (Solved by 83,763)</h2>

<h3 id="question-1">question</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>In the United Kingdom the currency is made up of pound (£) and pence (p). There are eight coins in general circulation:
    1p, 2p, 5p, 10p, 20p, 50p, £1 (100p), and £2 (200p).
It is possible to make £2 in the following way:
    1×£1 + 1×50p + 2×20p + 1×5p + 1×2p + 3×1p
How many different ways can £2 be made using any number of coins?
</code></pre></div></div>

<p><br /></p>

<h3 id="approach-1">approach</h3>
<p>I used dynamic programming solution to solve this coin change problem. Basically, the strategy is that for a new amount of coin, the ways to make up a specific amount, which equals another smaller amount plus this coin amount, should be the number of ways of the smaller amount plus the number of ways of this specific amount. For example, if the current coin iterated now is 5 and we want to update <code class="language-plaintext highlighter-rouge">dp[11]</code>, we should have <code class="language-plaintext highlighter-rouge">dp[11] = dp[11] + dp[6]</code>.</p>

<p>First initiate number of ways array with the base case “no coins”: <code class="language-plaintext highlighter-rouge">dp[0] = 1</code>, and all the rest set to 0. For each type of coins, iterate through 0 to lenth of dp minus the amount of this coin, then update the <code class="language-plaintext highlighter-rouge">dp[i+c] += dp[i]</code>.</p>

<h3 id="code-1">code</h3>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">coinSums</span><span class="p">(</span><span class="n">amount</span><span class="p">):</span>
    <span class="s">"""A function used to calculate the ways to make up a specific amount.

    Parameters
    ----------
    amount : int
        An amount of pence. 
    
    Returns
    -------
    int
        How many different ways can the amount of pence be made using any number of coins.
    
    Examples
    --------
    &gt;&gt;&gt; coinSums(5)
    3
    
    """</span>
    <span class="n">dp</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">*</span><span class="n">amount</span>
    <span class="n">coin</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">200</span><span class="p">]</span>
    <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">coin</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">dp</span><span class="p">)</span> <span class="o">-</span> <span class="n">c</span><span class="p">):</span>
            <span class="n">dp</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="n">c</span><span class="p">]</span> <span class="o">+=</span> <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
    <span class="k">return</span> <span class="n">dp</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span></code></pre></figure>

<h3 id="result-1">result</h3>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">"__main__"</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="n">coinSums</span><span class="p">(</span><span class="mi">200</span><span class="p">))</span>
<span class="c1"># 73682</span></code></pre></figure>

<p>Run the coinSums() function. The result is £2 can be made <em>73682</em> ways using any number of coins.</p>

<p><br /></p>

<h2 id="124-ordered-radicals-solved-by-13048">124. Ordered radicals (Solved by 13,048)</h2>

<h3 id="question-2">question</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>The radical of n, rad(n), is the product of the distinct prime factors of n. For example, 504 = 23 × 32 × 7, so rad(504) = 2 × 3 × 7 = 42.
If we calculate rad(n) for 1 ≤ n ≤ 10, then sort them on rad(n), and sorting on n if the radical values are equal, we get:

        Unsorted       Sorted
        n  rad(n)   n   rad(n)  k
        1    1      1     1     1
        2    2      2     2     2
        3    3      4     2     3
        4    2      8     2     4
        5    5      3     3     5
        6    6      9     3     6
        7    7      5     5     7
        8    2      6     6     8 	
        9    3      7     7     9
        10   10     10    10    10 	

Let E(k) be the kth element in the sorted n column; for example, E(4) = 8 and E(6) = 9.
If rad(n) is sorted for 1 ≤ n ≤ 100000, find E(10000).
</code></pre></div></div>

<p><br /></p>

<h3 id="approach-2">approach</h3>
<p>I used sieving to find primes and apply them as factors to calculate the integer radical of n. First initiate an array, of which each element is an array of radical and index, to store and update the radicals and later sort them to find out kth element. For example, if we have <code class="language-plaintext highlighter-rouge">rad = [[1,0],[1,1],[1,2],[1,3],[1,4]]</code> and we start from index 2, we will find that <code class="language-plaintext highlighter-rouge">rad[2][0]==1</code> and update <code class="language-plaintext highlighter-rouge">rad[2][0]</code> to 2 and <code class="language-plaintext highlighter-rouge">rad[4][0]</code> to 2 as well, by applying 2 as a factor to calculate the integer radical of 4.</p>

<h3 id="code-2">code</h3>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">orderedRadicals</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">k</span><span class="p">):</span>
    <span class="s">"""A function used to find kth element in the sorted n column. 

    Parameters
    ----------
    n : int
        How many radicals we want to get.
    k : int
        kth element in the sorted n column.
    
    Returns
    -------
    int
        E(10000) of 100000 sorted radicals.
    
    Examples
    --------
    &gt;&gt;&gt; orderedRadicals(10, 4)
    8
    
    """</span>
    <span class="n">rad</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">1</span><span class="p">,</span><span class="n">_</span><span class="p">]</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)]</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">rad</span><span class="p">)):</span>
        <span class="k">if</span> <span class="n">rad</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
            <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">rad</span><span class="p">),</span> <span class="n">i</span><span class="p">):</span>
                <span class="n">rad</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">*=</span> <span class="n">i</span>
    <span class="k">return</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">rad</span><span class="p">)[</span><span class="n">k</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span></code></pre></figure>

<h3 id="result-2">result</h3>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">"__main__"</span><span class="p">:</span>
  	<span class="k">print</span><span class="p">(</span><span class="n">orderedRadicals</span><span class="p">(</span><span class="mi">100000</span><span class="p">,</span> <span class="mi">10000</span><span class="p">))</span>
<span class="c1"># 21417</span></code></pre></figure>

<p>If rad(n) is sorted for 1 ≤ n ≤ 100000, the result of E(10000) is <em>21417</em>.</p>

<p><br /></p>

<p>https://medium.com/using-specialist-business-databases/creating-a-choropleth-map-using-geopandas-and-financial-data-c76419258746</p>
:ET