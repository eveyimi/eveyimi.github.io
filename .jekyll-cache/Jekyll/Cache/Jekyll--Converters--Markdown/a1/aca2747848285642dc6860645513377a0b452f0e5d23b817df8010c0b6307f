I"¯8<p>Hello, welcome to my blog! This post will share the data manipulation of <strong>[PhDs awarded in the US][PhDs awarded in the US]</strong>.</p>

<p>Please visit my <strong><a href="https://github.com/eveyimi/eveyimi.github.io">GitHub</a></strong> for more information.</p>

<h1 id="introduction">Introduction</h1>
<div>
    <h1>Hello Dash</h1>
    <div>
        <p>Dash converts Python classes into HTML</p>
        <p>This conversion happens behind the scenes by Dash's JavaScript front-end</p>
    </div>
</div>

<h1 id="consume-data">Consume data</h1>
<p>Using the below code to consume data using Star Wars API, we find that there are 82 people in total.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">base_url</span> <span class="o">=</span> <span class="s">'https://swapi.dev/api/people'</span>
<span class="n">resp</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="n">base_url</span><span class="p">)</span>
<span class="n">data</span> <span class="o">=</span> <span class="n">resp</span><span class="p">.</span><span class="n">json</span><span class="p">()</span></code></pre></figure>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    {'count': 82,
    'next': 'http://swapi.dev/api/people/?page=2',
    'previous': None,
    'results': [{'name': 'Luke Skywalker',
    'height': '172',
    'mass': '77',
    'hair_color': 'blond',
    'skin_color': 'fair',
    'eye_color': 'blue',
    'birth_year': '19BBY',
    'gender': 'male',
    'homeworld': 'http://swapi.dev/api/planets/1/',
    'films': ['http://swapi.dev/api/films/1/',
    'http://swapi.dev/api/films/2/',
    'http://swapi.dev/api/films/3/',
    'http://swapi.dev/api/films/6/'],
    'species': [],
    'vehicles': ['http://swapi.dev/api/vehicles/14/',
    'http://swapi.dev/api/vehicles/30/'],
    'starships': ['http://swapi.dev/api/starships/12/',
    'http://swapi.dev/api/starships/22/'],
    'created': '2014-12-09T13:50:51.644000Z',
    'edited': '2014-12-20T21:17:56.891000Z',
    'url': 'http://swapi.dev/api/people/1/'},
    {'name': 'C-3PO',
    'height': '167',
    'mass': '75',
    'hair_color': 'n/a',
    'skin_color': 'gold',
    'eye_color': 'yellow',
    'birth_year': '112BBY',
    'gender': 'n/a',
    'homeworld': 'http://swapi.dev/api/planets/1/',
    'films': ['http://swapi.dev/api/films/1/',
    'http://swapi.dev/api/films/2/',
    'http://swapi.dev/api/films/3/',
    'http://swapi.dev/api/films/4/',
    'http://swapi.dev/api/films/5/',
    'http://swapi.dev/api/films/6/'],
    'species': ['http://swapi.dev/api/species/2/'],
    'vehicles': [],
    'starships': [],
    'created': '2014-12-10T15:10:51.357000Z',
    'edited': '2014-12-20T21:17:50.309000Z',
    'url': 'http://swapi.dev/api/people/2/'},
    ... ...
</code></pre></div></div>

<p><br />
Then, try to consume them one by one until we get all 82 people data and use a list to store all the JSON data.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">people</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">count</span> <span class="o">=</span> <span class="mi">0</span> <span class="c1"># we will stop consuming until the count is 82
</span><span class="n">i</span> <span class="o">=</span> <span class="mi">1</span>
<span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
    <span class="n">r</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">base_url</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">i</span><span class="p">))).</span><span class="n">json</span><span class="p">()</span>
    <span class="k">if</span> <span class="n">r</span> <span class="o">==</span> <span class="p">{</span><span class="s">'detail'</span><span class="p">:</span> <span class="s">'Not found'</span><span class="p">}:</span>
        <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="k">continue</span>
    <span class="n">people</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">r</span><span class="p">)</span>
    <span class="n">count</span> <span class="o">+=</span> <span class="mi">1</span>
    <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
    <span class="k">if</span> <span class="n">count</span> <span class="o">==</span> <span class="n">data</span><span class="p">[</span><span class="s">'count'</span><span class="p">]:</span>
        <span class="k">break</span> </code></pre></figure>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    [{'name': 'Luke Skywalker',
    'height': '172',
    'mass': '77',
    'hair_color': 'blond',
    'skin_color': 'fair',
    'eye_color': 'blue',
    'birth_year': '19BBY',
    'gender': 'male',
    'homeworld': 'http://swapi.dev/api/planets/1/',
    'films': ['http://swapi.dev/api/films/1/',
    'http://swapi.dev/api/films/2/',
    'http://swapi.dev/api/films/3/',
    'http://swapi.dev/api/films/6/'],
    'species': [],
    'vehicles': ['http://swapi.dev/api/vehicles/14/',
    'http://swapi.dev/api/vehicles/30/'],
    'starships': ['http://swapi.dev/api/starships/12/',
    'http://swapi.dev/api/starships/22/'],
    'created': '2014-12-09T13:50:51.644000Z',
    'edited': '2014-12-20T21:17:56.891000Z',
    'url': 'http://swapi.dev/api/people/1/'},
    {'name': 'C-3PO',
    'height': '167',
    'mass': '75',
    'hair_color': 'n/a',
    'skin_color': 'gold',
    'eye_color': 'yellow',
    'birth_year': '112BBY',
    'gender': 'n/a',
    'homeworld': 'http://swapi.dev/api/planets/1/',
    'films': ['http://swapi.dev/api/films/1/',
    'http://swapi.dev/api/films/2/',
    'http://swapi.dev/api/films/3/',
    'http://swapi.dev/api/films/4/',
    'http://swapi.dev/api/films/5/',
    'http://swapi.dev/api/films/6/'],
    'species': ['http://swapi.dev/api/species/2/'],
    'vehicles': [],
    'starships': [],
    'created': '2014-12-10T15:10:51.357000Z',
    'edited': '2014-12-20T21:17:50.309000Z',
    'url': 'http://swapi.dev/api/people/2/'},
    {'name': 'R2-D2',
    'height': '96',
    'mass': '32',
    'hair_color': 'n/a',
    'skin_color': 'white, blue',
    'eye_color': 'red',
    'birth_year': '33BBY',
    'gender': 'n/a',
    'homeworld': 'http://swapi.dev/api/planets/8/',
    'films': ['http://swapi.dev/api/films/1/',
    'http://swapi.dev/api/films/2/',
    'http://swapi.dev/api/films/3/',
    'http://swapi.dev/api/films/4/',
    'http://swapi.dev/api/films/5/',
    'http://swapi.dev/api/films/6/'],
    'species': ['http://swapi.dev/api/species/2/'],
    'vehicles': [],
    'starships': [],
    'created': '2014-12-10T15:11:50.376000Z',
    'edited': '2014-12-20T21:17:50.311000Z',
    'url': 'http://swapi.dev/api/people/3/'},
    ... ...
</code></pre></div></div>

<p><br />
We are required to provide the name of films each people appeared in. The raw people data only contains the URL of the films as below.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">people</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="s">'films'</span><span class="p">]</span></code></pre></figure>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    ['http://swapi.dev/api/films/1/',
    'http://swapi.dev/api/films/2/',
    'http://swapi.dev/api/films/3/',
    'http://swapi.dev/api/films/6/']
</code></pre></div></div>

<p><br />
And each film API contains the below information, taking the first people as an example.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">requests</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="n">people</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="s">'films'</span><span class="p">][</span><span class="mi">0</span><span class="p">]).</span><span class="n">json</span><span class="p">()</span></code></pre></figure>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    {'title': 'A New Hope',
    'episode_id': 4,
    'opening_crawl': "It is a period of civil war.\r\nRebel spaceships, striking\r\nfrom a hidden base, have won\r\ntheir first victory against\r\nthe evil Galactic Empire.\r\n\r\nDuring the battle, Rebel\r\nspies managed to steal secret\r\nplans to the Empire's\r\nultimate weapon, the DEATH\r\nSTAR, an armored space\r\nstation with enough power\r\nto destroy an entire planet.\r\n\r\nPursued by the Empire's\r\nsinister agents, Princess\r\nLeia races home aboard her\r\nstarship, custodian of the\r\nstolen plans that can save her\r\npeople and restore\r\nfreedom to the galaxy....",
    'director': 'George Lucas',
    'producer': 'Gary Kurtz, Rick McCallum',
    'release_date': '1977-05-25',
    'characters': ['http://swapi.dev/api/people/1/',
    'http://swapi.dev/api/people/2/',
    'http://swapi.dev/api/people/3/',
    'http://swapi.dev/api/people/4/',
    'http://swapi.dev/api/people/5/',
</code></pre></div></div>

<p><br />
We need to use the request library again to get all the names.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="s">'count'</span><span class="p">]):</span>
    <span class="n">people</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="s">'film_name'</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">people</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="s">'films'</span><span class="p">]:</span>
        <span class="n">film</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="n">item</span><span class="p">).</span><span class="n">json</span><span class="p">()</span>
        <span class="n">people</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="s">'film_name'</span><span class="p">].</span><span class="n">append</span><span class="p">(</span><span class="n">film</span><span class="p">[</span><span class="s">'title'</span><span class="p">])</span>     </code></pre></figure>

<p><br />
Then we transfrom the JSON data into a dataframe.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">json_normalize</span><span class="p">(</span><span class="n">people</span><span class="p">)</span></code></pre></figure>

<p><img src="/images/HW5/1.png" alt="1" />
<em>Dataframe - 1</em>
<img src="/images/HW5/2.png" alt="1" />
<em>Dataframe - 2</em></p>

<h1 id="the-oldest-person">The oldest person</h1>
<p>BBY means Before the Battle of Yavin. If we want to find out the oldest person, we need to find the person with the biggest number before BBY. First we need to remove the <code class="language-plaintext highlighter-rouge">BBY</code> from the birth yeas. Then we can find the index of the oldest person.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">df_birth</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="n">df</span><span class="p">[</span><span class="s">'birth_year'</span><span class="p">].</span><span class="nb">str</span><span class="p">.</span><span class="n">contains</span><span class="p">(</span><span class="s">"BBY"</span><span class="p">)]</span>
<span class="n">idx</span> <span class="o">=</span> <span class="n">df_birth</span><span class="p">[(</span><span class="n">df_birth</span><span class="p">[</span><span class="s">'birth_year'</span><span class="p">]</span><span class="o">==</span><span class="nb">max</span><span class="p">(</span><span class="n">df_birth</span><span class="p">[</span><span class="s">'birth_year'</span><span class="p">]))].</span><span class="n">index</span></code></pre></figure>

<p>We then use the index to find the peopleâs name, which is <code class="language-plaintext highlighter-rouge">Yoda</code>.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">df_birth</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">idx</span><span class="p">][</span><span class="s">'name'</span><span class="p">].</span><span class="n">to_list</span><span class="p">()[</span><span class="mi">0</span><span class="p">]</span></code></pre></figure>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    'Yoda'
</code></pre></div></div>

<p><br />
Then we can figure out the titles of all the films she appeared in.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">df_birth</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">idx</span><span class="p">][</span><span class="s">'film_name'</span><span class="p">].</span><span class="n">to_list</span><span class="p">()</span></code></pre></figure>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    [['The Empire Strikes Back',
    'Return of the Jedi',
    'The Phantom Menace',
    'Attack of the Clones',
    'Revenge of the Sith']]
</code></pre></div></div>

<p><br /></p>

<!-- https://medium.com/using-specialist-business-databases/creating-a-choropleth-map-using-geopandas-and-financial-data-c76419258746 -->
:ET